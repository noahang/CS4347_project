import os
import librosa
import sounddevice as sd
import numpy as np

AUDIO_DIR = "C:/Users/noaha/Desktop/dataset_1_cleaned/audio"
OUTPUT_DIR = "C:/Users/noaha/Desktop/Data/train/cqts"

os.makedirs(OUTPUT_DIR, exist_ok=True)

#Audio Parameters:
SAMPLE_RATE = 44100
CHANNELS = 1

#Analysis Parameters:
PROCESSING_INTERVAL_SECONDS = 2
PROCESSING_INTERVAL_SAMPLES = int(SAMPLE_RATE * PROCESSING_INTERVAL_SECONDS)

#frame length (not used by CQT):
FRAME_MS = 20.0
FRAME_SAMPLES = int(SAMPLE_RATE * (FRAME_MS / 1000.0))

#hop-length:
HOP_MS = 10.0
HOP_SAMPLES = int(SAMPLE_RATE * (HOP_MS / 1000.0))

#CQT Parameters:
N_FFT = 1024
CQT_OCTAVES = 7
CQT_BINS_PER_OCTAVE = 12
CQT_N_BINS = CQT_OCTAVES * CQT_BINS_PER_OCTAVE


#Sliding Window Parameters:
PROCESSING_HOP_SECONDS = 0.5
PROCESSING_HOP_SAMPLES = int(SAMPLE_RATE * PROCESSING_HOP_SECONDS)

for filename in os.listdir(AUDIO_DIR):

    #modified from code generated by T3.chat
    if not filename.lower().endswith(".mp3"):
        continue
    
    
    filepath = os.path.join(AUDIO_DIR, filename)
    print(f"Processing {filename}...")

    # Load audio file 
    
    y, sr = librosa.load(filepath, sr=SAMPLE_RATE)
    total_duration = librosa.get_duration(y=y, sr=sr)

    start_samples = np.arange(0, len(y) - PROCESSING_INTERVAL_SAMPLES + 1, PROCESSING_HOP_SAMPLES)

    cqts = []
    for start in start_samples:
        end = start + PROCESSING_INTERVAL_SAMPLES
        chunk_to_process = y[start:end]

        # Compute CQT
        cqt_features_for_one_interval = librosa.cqt(
                    y=chunk_to_process,
                    sr=SAMPLE_RATE,
                    hop_length=HOP_SAMPLES,
                    bins_per_octave= CQT_BINS_PER_OCTAVE,
                    n_bins= CQT_N_BINS, 
                )
        
        cqts.append(np.abs(cqt_features_for_one_interval))

    # Stack all windows’ CQTs into one array
    cqts = np.stack(cqts, axis=0)

    # Save result
    out_name = os.path.splitext(filename)[0] + "_cqt.npy"
    np.save(os.path.join(OUTPUT_DIR, out_name), cqts)

print("✅ Done computing CQTs for all files!")


